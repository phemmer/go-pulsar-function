// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kv_rpc.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	kv "github.com/phemmer/go-pulsar-function/bookkeeper/proto/kv"
	storage "github.com/phemmer/go-pulsar-function/bookkeeper/proto/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RangeRequest_SortOrder int32

const (
	RangeRequest_NONE    RangeRequest_SortOrder = 0
	RangeRequest_ASCEND  RangeRequest_SortOrder = 1
	RangeRequest_DESCEND RangeRequest_SortOrder = 2
)

var RangeRequest_SortOrder_name = map[int32]string{
	0: "NONE",
	1: "ASCEND",
	2: "DESCEND",
}

var RangeRequest_SortOrder_value = map[string]int32{
	"NONE":    0,
	"ASCEND":  1,
	"DESCEND": 2,
}

func (x RangeRequest_SortOrder) String() string {
	return proto.EnumName(RangeRequest_SortOrder_name, int32(x))
}

func (RangeRequest_SortOrder) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{2, 0}
}

type RangeRequest_SortTarget int32

const (
	RangeRequest_KEY     RangeRequest_SortTarget = 0
	RangeRequest_VERSION RangeRequest_SortTarget = 1
	RangeRequest_CREATE  RangeRequest_SortTarget = 2
	RangeRequest_MOD     RangeRequest_SortTarget = 3
	RangeRequest_VALUE   RangeRequest_SortTarget = 4
)

var RangeRequest_SortTarget_name = map[int32]string{
	0: "KEY",
	1: "VERSION",
	2: "CREATE",
	3: "MOD",
	4: "VALUE",
}

var RangeRequest_SortTarget_value = map[string]int32{
	"KEY":     0,
	"VERSION": 1,
	"CREATE":  2,
	"MOD":     3,
	"VALUE":   4,
}

func (x RangeRequest_SortTarget) String() string {
	return proto.EnumName(RangeRequest_SortTarget_name, int32(x))
}

func (RangeRequest_SortTarget) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{2, 1}
}

type Compare_CompareResult int32

const (
	Compare_EQUAL     Compare_CompareResult = 0
	Compare_GREATER   Compare_CompareResult = 1
	Compare_LESS      Compare_CompareResult = 2
	Compare_NOT_EQUAL Compare_CompareResult = 3
)

var Compare_CompareResult_name = map[int32]string{
	0: "EQUAL",
	1: "GREATER",
	2: "LESS",
	3: "NOT_EQUAL",
}

var Compare_CompareResult_value = map[string]int32{
	"EQUAL":     0,
	"GREATER":   1,
	"LESS":      2,
	"NOT_EQUAL": 3,
}

func (x Compare_CompareResult) String() string {
	return proto.EnumName(Compare_CompareResult_name, int32(x))
}

func (Compare_CompareResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{12, 0}
}

type Compare_CompareTarget int32

const (
	Compare_VERSION Compare_CompareTarget = 0
	Compare_CREATE  Compare_CompareTarget = 1
	Compare_MOD     Compare_CompareTarget = 2
	Compare_VALUE   Compare_CompareTarget = 3
)

var Compare_CompareTarget_name = map[int32]string{
	0: "VERSION",
	1: "CREATE",
	2: "MOD",
	3: "VALUE",
}

var Compare_CompareTarget_value = map[string]int32{
	"VERSION": 0,
	"CREATE":  1,
	"MOD":     2,
	"VALUE":   3,
}

func (x Compare_CompareTarget) String() string {
	return proto.EnumName(Compare_CompareTarget_name, int32(x))
}

func (Compare_CompareTarget) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{12, 1}
}

// Routing Header added to identify the range & storage container information (used in the stream store)
type RoutingHeader struct {
	// stream id
	StreamId int64 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// range id
	RangeId int64 `protobuf:"varint,2,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	// routing key
	RKey                 []byte   `protobuf:"bytes,3,opt,name=r_key,json=rKey,proto3" json:"r_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoutingHeader) Reset()         { *m = RoutingHeader{} }
func (m *RoutingHeader) String() string { return proto.CompactTextString(m) }
func (*RoutingHeader) ProtoMessage()    {}
func (*RoutingHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{0}
}

func (m *RoutingHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingHeader.Unmarshal(m, b)
}
func (m *RoutingHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingHeader.Marshal(b, m, deterministic)
}
func (m *RoutingHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingHeader.Merge(m, src)
}
func (m *RoutingHeader) XXX_Size() int {
	return xxx_messageInfo_RoutingHeader.Size(m)
}
func (m *RoutingHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingHeader proto.InternalMessageInfo

func (m *RoutingHeader) GetStreamId() int64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *RoutingHeader) GetRangeId() int64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

func (m *RoutingHeader) GetRKey() []byte {
	if m != nil {
		return m.RKey
	}
	return nil
}

type ResponseHeader struct {
	// Status Code
	Code storage.StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=bookkeeper.proto.storage.StatusCode" json:"code,omitempty"`
	// routing header
	RoutingHeader        *RoutingHeader `protobuf:"bytes,99,opt,name=routing_header,json=routingHeader,proto3" json:"routing_header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResponseHeader) Reset()         { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()    {}
func (*ResponseHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{1}
}

func (m *ResponseHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseHeader.Unmarshal(m, b)
}
func (m *ResponseHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseHeader.Marshal(b, m, deterministic)
}
func (m *ResponseHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseHeader.Merge(m, src)
}
func (m *ResponseHeader) XXX_Size() int {
	return xxx_messageInfo_ResponseHeader.Size(m)
}
func (m *ResponseHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseHeader proto.InternalMessageInfo

func (m *ResponseHeader) GetCode() storage.StatusCode {
	if m != nil {
		return m.Code
	}
	return storage.StatusCode_SUCCESS
}

func (m *ResponseHeader) GetRoutingHeader() *RoutingHeader {
	if m != nil {
		return m.RoutingHeader
	}
	return nil
}

type RangeRequest struct {
	// key is the first key for the range. If range_end is not given, the request only looks up key.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// range_end is the upper bound on the requested range [key, range_end).
	// If range_end is '\0', the range is all keys >= key.
	// If range_end is key plus one (e.g., "aa"+1 == "ab", "a\xff"+1 == "b"),
	// then the range request gets all keys prefixed with key.
	// If both key and range_end are '\0', then the range request returns all keys.
	RangeEnd []byte `protobuf:"bytes,2,opt,name=range_end,json=rangeEnd,proto3" json:"range_end,omitempty"`
	// limit is a limit on the number of keys returned for the request.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// revision is the point-in-time of the key-value store to use for the range.
	// If revision is less or equal to zero, the range is over the newest key-value store.
	// If the revision has been compacted, ErrCompacted is returned as a response.
	Revision int64 `protobuf:"varint,4,opt,name=revision,proto3" json:"revision,omitempty"`
	// sort_order is the order for returned sorted results.
	SortOrder RangeRequest_SortOrder `protobuf:"varint,5,opt,name=sort_order,json=sortOrder,proto3,enum=bookkeeper.proto.kv.rpc.RangeRequest_SortOrder" json:"sort_order,omitempty"`
	// sort_target is the key-value field to use for sorting.
	SortTarget RangeRequest_SortTarget `protobuf:"varint,6,opt,name=sort_target,json=sortTarget,proto3,enum=bookkeeper.proto.kv.rpc.RangeRequest_SortTarget" json:"sort_target,omitempty"`
	// serializable sets the range request to use serializable member-local reads.
	// Range requests are linearizable by default; linearizable requests have higher
	// latency and lower throughput than serializable requests but reflect the current
	// consensus of the cluster. For better performance, in exchange for possible stale reads,
	// a serializable range request is served locally without needing to reach consensus
	// with other nodes in the cluster.
	Serializable bool `protobuf:"varint,7,opt,name=serializable,proto3" json:"serializable,omitempty"`
	// keys_only when set returns only the keys and not the values.
	KeysOnly bool `protobuf:"varint,8,opt,name=keys_only,json=keysOnly,proto3" json:"keys_only,omitempty"`
	// count_only when set returns only the count of the keys in the range.
	CountOnly bool `protobuf:"varint,9,opt,name=count_only,json=countOnly,proto3" json:"count_only,omitempty"`
	// min_mod_revision is the lower bound for returned key mod revisions; all keys with
	// lesser mod revisions will be filtered away.
	MinModRevision int64 `protobuf:"varint,10,opt,name=min_mod_revision,json=minModRevision,proto3" json:"min_mod_revision,omitempty"`
	// max_mod_revision is the upper bound for returned key mod revisions; all keys with
	// greater mod revisions will be filtered away.
	MaxModRevision int64 `protobuf:"varint,11,opt,name=max_mod_revision,json=maxModRevision,proto3" json:"max_mod_revision,omitempty"`
	// min_create_revision is the lower bound for returned key create revisions; all keys with
	// lesser create trevisions will be filtered away.
	MinCreateRevision int64 `protobuf:"varint,12,opt,name=min_create_revision,json=minCreateRevision,proto3" json:"min_create_revision,omitempty"`
	// max_create_revision is the upper bound for returned key create revisions; all keys with
	// greater create revisions will be filtered away.
	MaxCreateRevision int64 `protobuf:"varint,13,opt,name=max_create_revision,json=maxCreateRevision,proto3" json:"max_create_revision,omitempty"`
	// header
	Header               *RoutingHeader `protobuf:"bytes,99,opt,name=header,proto3" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RangeRequest) Reset()         { *m = RangeRequest{} }
func (m *RangeRequest) String() string { return proto.CompactTextString(m) }
func (*RangeRequest) ProtoMessage()    {}
func (*RangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{2}
}

func (m *RangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RangeRequest.Unmarshal(m, b)
}
func (m *RangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RangeRequest.Marshal(b, m, deterministic)
}
func (m *RangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeRequest.Merge(m, src)
}
func (m *RangeRequest) XXX_Size() int {
	return xxx_messageInfo_RangeRequest.Size(m)
}
func (m *RangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RangeRequest proto.InternalMessageInfo

func (m *RangeRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RangeRequest) GetRangeEnd() []byte {
	if m != nil {
		return m.RangeEnd
	}
	return nil
}

func (m *RangeRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RangeRequest) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *RangeRequest) GetSortOrder() RangeRequest_SortOrder {
	if m != nil {
		return m.SortOrder
	}
	return RangeRequest_NONE
}

func (m *RangeRequest) GetSortTarget() RangeRequest_SortTarget {
	if m != nil {
		return m.SortTarget
	}
	return RangeRequest_KEY
}

func (m *RangeRequest) GetSerializable() bool {
	if m != nil {
		return m.Serializable
	}
	return false
}

func (m *RangeRequest) GetKeysOnly() bool {
	if m != nil {
		return m.KeysOnly
	}
	return false
}

func (m *RangeRequest) GetCountOnly() bool {
	if m != nil {
		return m.CountOnly
	}
	return false
}

func (m *RangeRequest) GetMinModRevision() int64 {
	if m != nil {
		return m.MinModRevision
	}
	return 0
}

func (m *RangeRequest) GetMaxModRevision() int64 {
	if m != nil {
		return m.MaxModRevision
	}
	return 0
}

func (m *RangeRequest) GetMinCreateRevision() int64 {
	if m != nil {
		return m.MinCreateRevision
	}
	return 0
}

func (m *RangeRequest) GetMaxCreateRevision() int64 {
	if m != nil {
		return m.MaxCreateRevision
	}
	return 0
}

func (m *RangeRequest) GetHeader() *RoutingHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type RangeResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// kvs is the list of key-value pairs matched by the range request.
	// kvs is empty when count is requested.
	Kvs []*kv.KeyValue `protobuf:"bytes,2,rep,name=kvs,proto3" json:"kvs,omitempty"`
	// more indicates if there are more keys to return in the requested range.
	More bool `protobuf:"varint,3,opt,name=more,proto3" json:"more,omitempty"`
	// count is set to the number of keys within the range when requested.
	Count                int64    `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RangeResponse) Reset()         { *m = RangeResponse{} }
func (m *RangeResponse) String() string { return proto.CompactTextString(m) }
func (*RangeResponse) ProtoMessage()    {}
func (*RangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{3}
}

func (m *RangeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RangeResponse.Unmarshal(m, b)
}
func (m *RangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RangeResponse.Marshal(b, m, deterministic)
}
func (m *RangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeResponse.Merge(m, src)
}
func (m *RangeResponse) XXX_Size() int {
	return xxx_messageInfo_RangeResponse.Size(m)
}
func (m *RangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RangeResponse proto.InternalMessageInfo

func (m *RangeResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RangeResponse) GetKvs() []*kv.KeyValue {
	if m != nil {
		return m.Kvs
	}
	return nil
}

func (m *RangeResponse) GetMore() bool {
	if m != nil {
		return m.More
	}
	return false
}

func (m *RangeResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type PutRequest struct {
	// key is the key, in bytes, to put into the key-value store.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// value is the value, in bytes, to associate with the key in the key-value store.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// lease is the lease ID to associate with the key in the key-value store. A lease
	// value of 0 indicates no lease.
	Lease int64 `protobuf:"varint,3,opt,name=lease,proto3" json:"lease,omitempty"`
	// If prev_kv is set, etcd gets the previous key-value pair before changing it.
	// The previous key-value pair will be returned in the put response.
	PrevKv bool `protobuf:"varint,4,opt,name=prev_kv,json=prevKv,proto3" json:"prev_kv,omitempty"`
	// If ignore_value is set, etcd updates the key using its current value.
	// Returns an error if the key does not exist.
	IgnoreValue bool `protobuf:"varint,5,opt,name=ignore_value,json=ignoreValue,proto3" json:"ignore_value,omitempty"`
	// If ignore_lease is set, etcd updates the key using its current lease.
	// Returns an error if the key does not exist.
	IgnoreLease bool `protobuf:"varint,6,opt,name=ignore_lease,json=ignoreLease,proto3" json:"ignore_lease,omitempty"`
	// header
	Header               *RoutingHeader `protobuf:"bytes,99,opt,name=header,proto3" json:"header,omitempty"`
	ExpectedVersion      int64          `protobuf:"varint,100,opt,name=expected_version,json=expectedVersion,proto3" json:"expected_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PutRequest) Reset()         { *m = PutRequest{} }
func (m *PutRequest) String() string { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()    {}
func (*PutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{4}
}

func (m *PutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutRequest.Unmarshal(m, b)
}
func (m *PutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutRequest.Marshal(b, m, deterministic)
}
func (m *PutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutRequest.Merge(m, src)
}
func (m *PutRequest) XXX_Size() int {
	return xxx_messageInfo_PutRequest.Size(m)
}
func (m *PutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutRequest proto.InternalMessageInfo

func (m *PutRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *PutRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PutRequest) GetLease() int64 {
	if m != nil {
		return m.Lease
	}
	return 0
}

func (m *PutRequest) GetPrevKv() bool {
	if m != nil {
		return m.PrevKv
	}
	return false
}

func (m *PutRequest) GetIgnoreValue() bool {
	if m != nil {
		return m.IgnoreValue
	}
	return false
}

func (m *PutRequest) GetIgnoreLease() bool {
	if m != nil {
		return m.IgnoreLease
	}
	return false
}

func (m *PutRequest) GetHeader() *RoutingHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PutRequest) GetExpectedVersion() int64 {
	if m != nil {
		return m.ExpectedVersion
	}
	return 0
}

type PutResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// if prev_kv is set in the request, the previous key-value pair will be returned.
	PrevKv               *kv.KeyValue `protobuf:"bytes,2,opt,name=prev_kv,json=prevKv,proto3" json:"prev_kv,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PutResponse) Reset()         { *m = PutResponse{} }
func (m *PutResponse) String() string { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()    {}
func (*PutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{5}
}

func (m *PutResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutResponse.Unmarshal(m, b)
}
func (m *PutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutResponse.Marshal(b, m, deterministic)
}
func (m *PutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutResponse.Merge(m, src)
}
func (m *PutResponse) XXX_Size() int {
	return xxx_messageInfo_PutResponse.Size(m)
}
func (m *PutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PutResponse proto.InternalMessageInfo

func (m *PutResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PutResponse) GetPrevKv() *kv.KeyValue {
	if m != nil {
		return m.PrevKv
	}
	return nil
}

type IncrementRequest struct {
	// key is the key, in bytes, to increment the value
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// amount is a long number to increment
	Amount int64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// return the total amount after increment
	GetTotal bool `protobuf:"varint,3,opt,name=get_total,json=getTotal,proto3" json:"get_total,omitempty"`
	// header
	Header               *RoutingHeader `protobuf:"bytes,99,opt,name=header,proto3" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *IncrementRequest) Reset()         { *m = IncrementRequest{} }
func (m *IncrementRequest) String() string { return proto.CompactTextString(m) }
func (*IncrementRequest) ProtoMessage()    {}
func (*IncrementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{6}
}

func (m *IncrementRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IncrementRequest.Unmarshal(m, b)
}
func (m *IncrementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IncrementRequest.Marshal(b, m, deterministic)
}
func (m *IncrementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncrementRequest.Merge(m, src)
}
func (m *IncrementRequest) XXX_Size() int {
	return xxx_messageInfo_IncrementRequest.Size(m)
}
func (m *IncrementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IncrementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IncrementRequest proto.InternalMessageInfo

func (m *IncrementRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *IncrementRequest) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *IncrementRequest) GetGetTotal() bool {
	if m != nil {
		return m.GetTotal
	}
	return false
}

func (m *IncrementRequest) GetHeader() *RoutingHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type IncrementResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// if get_total is set in the request, the total amount will be returned after this increment.
	TotalAmount          int64    `protobuf:"varint,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncrementResponse) Reset()         { *m = IncrementResponse{} }
func (m *IncrementResponse) String() string { return proto.CompactTextString(m) }
func (*IncrementResponse) ProtoMessage()    {}
func (*IncrementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{7}
}

func (m *IncrementResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IncrementResponse.Unmarshal(m, b)
}
func (m *IncrementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IncrementResponse.Marshal(b, m, deterministic)
}
func (m *IncrementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncrementResponse.Merge(m, src)
}
func (m *IncrementResponse) XXX_Size() int {
	return xxx_messageInfo_IncrementResponse.Size(m)
}
func (m *IncrementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IncrementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IncrementResponse proto.InternalMessageInfo

func (m *IncrementResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *IncrementResponse) GetTotalAmount() int64 {
	if m != nil {
		return m.TotalAmount
	}
	return 0
}

type DeleteRangeRequest struct {
	// key is the first key to delete in the range.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// range_end is the key following the last key to delete for the range [key, range_end).
	// If range_end is not given, the range is defined to contain only the key argument.
	// If range_end is one bit larger than the given key, then the range is all
	// the all keys with the prefix (the given key).
	// If range_end is '\0', the range is all keys greater than or equal to the key argument.
	RangeEnd []byte `protobuf:"bytes,2,opt,name=range_end,json=rangeEnd,proto3" json:"range_end,omitempty"`
	// If prev_kv is set, etcd gets the previous key-value pairs before deleting it.
	// The previous key-value pairs will be returned in the delte response.
	PrevKv bool `protobuf:"varint,3,opt,name=prev_kv,json=prevKv,proto3" json:"prev_kv,omitempty"`
	// header
	Header               *RoutingHeader `protobuf:"bytes,99,opt,name=header,proto3" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DeleteRangeRequest) Reset()         { *m = DeleteRangeRequest{} }
func (m *DeleteRangeRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRangeRequest) ProtoMessage()    {}
func (*DeleteRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{8}
}

func (m *DeleteRangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRangeRequest.Unmarshal(m, b)
}
func (m *DeleteRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRangeRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRangeRequest.Merge(m, src)
}
func (m *DeleteRangeRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRangeRequest.Size(m)
}
func (m *DeleteRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRangeRequest proto.InternalMessageInfo

func (m *DeleteRangeRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DeleteRangeRequest) GetRangeEnd() []byte {
	if m != nil {
		return m.RangeEnd
	}
	return nil
}

func (m *DeleteRangeRequest) GetPrevKv() bool {
	if m != nil {
		return m.PrevKv
	}
	return false
}

func (m *DeleteRangeRequest) GetHeader() *RoutingHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type DeleteRangeResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// deleted is the number of keys deleted by the delete range request.
	Deleted int64 `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// if prev_kv is set in the request, the previous key-value pairs will be returned.
	PrevKvs              []*kv.KeyValue `protobuf:"bytes,3,rep,name=prev_kvs,json=prevKvs,proto3" json:"prev_kvs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DeleteRangeResponse) Reset()         { *m = DeleteRangeResponse{} }
func (m *DeleteRangeResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteRangeResponse) ProtoMessage()    {}
func (*DeleteRangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{9}
}

func (m *DeleteRangeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRangeResponse.Unmarshal(m, b)
}
func (m *DeleteRangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRangeResponse.Marshal(b, m, deterministic)
}
func (m *DeleteRangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRangeResponse.Merge(m, src)
}
func (m *DeleteRangeResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteRangeResponse.Size(m)
}
func (m *DeleteRangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRangeResponse proto.InternalMessageInfo

func (m *DeleteRangeResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DeleteRangeResponse) GetDeleted() int64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *DeleteRangeResponse) GetPrevKvs() []*kv.KeyValue {
	if m != nil {
		return m.PrevKvs
	}
	return nil
}

type RequestOp struct {
	// request is a union of request types accepted by a transaction.
	//
	// Types that are valid to be assigned to Request:
	//	*RequestOp_RequestRange
	//	*RequestOp_RequestPut
	//	*RequestOp_RequestDeleteRange
	Request              isRequestOp_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RequestOp) Reset()         { *m = RequestOp{} }
func (m *RequestOp) String() string { return proto.CompactTextString(m) }
func (*RequestOp) ProtoMessage()    {}
func (*RequestOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{10}
}

func (m *RequestOp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestOp.Unmarshal(m, b)
}
func (m *RequestOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestOp.Marshal(b, m, deterministic)
}
func (m *RequestOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestOp.Merge(m, src)
}
func (m *RequestOp) XXX_Size() int {
	return xxx_messageInfo_RequestOp.Size(m)
}
func (m *RequestOp) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestOp.DiscardUnknown(m)
}

var xxx_messageInfo_RequestOp proto.InternalMessageInfo

type isRequestOp_Request interface {
	isRequestOp_Request()
}

type RequestOp_RequestRange struct {
	RequestRange *RangeRequest `protobuf:"bytes,1,opt,name=request_range,json=requestRange,proto3,oneof"`
}

type RequestOp_RequestPut struct {
	RequestPut *PutRequest `protobuf:"bytes,2,opt,name=request_put,json=requestPut,proto3,oneof"`
}

type RequestOp_RequestDeleteRange struct {
	RequestDeleteRange *DeleteRangeRequest `protobuf:"bytes,3,opt,name=request_delete_range,json=requestDeleteRange,proto3,oneof"`
}

func (*RequestOp_RequestRange) isRequestOp_Request() {}

func (*RequestOp_RequestPut) isRequestOp_Request() {}

func (*RequestOp_RequestDeleteRange) isRequestOp_Request() {}

func (m *RequestOp) GetRequest() isRequestOp_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *RequestOp) GetRequestRange() *RangeRequest {
	if x, ok := m.GetRequest().(*RequestOp_RequestRange); ok {
		return x.RequestRange
	}
	return nil
}

func (m *RequestOp) GetRequestPut() *PutRequest {
	if x, ok := m.GetRequest().(*RequestOp_RequestPut); ok {
		return x.RequestPut
	}
	return nil
}

func (m *RequestOp) GetRequestDeleteRange() *DeleteRangeRequest {
	if x, ok := m.GetRequest().(*RequestOp_RequestDeleteRange); ok {
		return x.RequestDeleteRange
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RequestOp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RequestOp_RequestRange)(nil),
		(*RequestOp_RequestPut)(nil),
		(*RequestOp_RequestDeleteRange)(nil),
	}
}

type ResponseOp struct {
	// response is a union of response types returned by a transaction.
	//
	// Types that are valid to be assigned to Response:
	//	*ResponseOp_ResponseRange
	//	*ResponseOp_ResponsePut
	//	*ResponseOp_ResponseDeleteRange
	Response             isResponseOp_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ResponseOp) Reset()         { *m = ResponseOp{} }
func (m *ResponseOp) String() string { return proto.CompactTextString(m) }
func (*ResponseOp) ProtoMessage()    {}
func (*ResponseOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{11}
}

func (m *ResponseOp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseOp.Unmarshal(m, b)
}
func (m *ResponseOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseOp.Marshal(b, m, deterministic)
}
func (m *ResponseOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseOp.Merge(m, src)
}
func (m *ResponseOp) XXX_Size() int {
	return xxx_messageInfo_ResponseOp.Size(m)
}
func (m *ResponseOp) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseOp.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseOp proto.InternalMessageInfo

type isResponseOp_Response interface {
	isResponseOp_Response()
}

type ResponseOp_ResponseRange struct {
	ResponseRange *RangeResponse `protobuf:"bytes,1,opt,name=response_range,json=responseRange,proto3,oneof"`
}

type ResponseOp_ResponsePut struct {
	ResponsePut *PutResponse `protobuf:"bytes,2,opt,name=response_put,json=responsePut,proto3,oneof"`
}

type ResponseOp_ResponseDeleteRange struct {
	ResponseDeleteRange *DeleteRangeResponse `protobuf:"bytes,3,opt,name=response_delete_range,json=responseDeleteRange,proto3,oneof"`
}

func (*ResponseOp_ResponseRange) isResponseOp_Response() {}

func (*ResponseOp_ResponsePut) isResponseOp_Response() {}

func (*ResponseOp_ResponseDeleteRange) isResponseOp_Response() {}

func (m *ResponseOp) GetResponse() isResponseOp_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ResponseOp) GetResponseRange() *RangeResponse {
	if x, ok := m.GetResponse().(*ResponseOp_ResponseRange); ok {
		return x.ResponseRange
	}
	return nil
}

func (m *ResponseOp) GetResponsePut() *PutResponse {
	if x, ok := m.GetResponse().(*ResponseOp_ResponsePut); ok {
		return x.ResponsePut
	}
	return nil
}

func (m *ResponseOp) GetResponseDeleteRange() *DeleteRangeResponse {
	if x, ok := m.GetResponse().(*ResponseOp_ResponseDeleteRange); ok {
		return x.ResponseDeleteRange
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ResponseOp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ResponseOp_ResponseRange)(nil),
		(*ResponseOp_ResponsePut)(nil),
		(*ResponseOp_ResponseDeleteRange)(nil),
	}
}

type Compare struct {
	// result is logical comparison operation for this comparison.
	Result Compare_CompareResult `protobuf:"varint,1,opt,name=result,proto3,enum=bookkeeper.proto.kv.rpc.Compare_CompareResult" json:"result,omitempty"`
	// target is the key-value field to inspect for the comparison.
	Target Compare_CompareTarget `protobuf:"varint,2,opt,name=target,proto3,enum=bookkeeper.proto.kv.rpc.Compare_CompareTarget" json:"target,omitempty"`
	// key is the subject key for the comparison operation.
	Key []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are valid to be assigned to TargetUnion:
	//	*Compare_Version
	//	*Compare_CreateRevision
	//	*Compare_ModRevision
	//	*Compare_Value
	TargetUnion          isCompare_TargetUnion `protobuf_oneof:"target_union"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Compare) Reset()         { *m = Compare{} }
func (m *Compare) String() string { return proto.CompactTextString(m) }
func (*Compare) ProtoMessage()    {}
func (*Compare) Descriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{12}
}

func (m *Compare) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Compare.Unmarshal(m, b)
}
func (m *Compare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Compare.Marshal(b, m, deterministic)
}
func (m *Compare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Compare.Merge(m, src)
}
func (m *Compare) XXX_Size() int {
	return xxx_messageInfo_Compare.Size(m)
}
func (m *Compare) XXX_DiscardUnknown() {
	xxx_messageInfo_Compare.DiscardUnknown(m)
}

var xxx_messageInfo_Compare proto.InternalMessageInfo

func (m *Compare) GetResult() Compare_CompareResult {
	if m != nil {
		return m.Result
	}
	return Compare_EQUAL
}

func (m *Compare) GetTarget() Compare_CompareTarget {
	if m != nil {
		return m.Target
	}
	return Compare_VERSION
}

func (m *Compare) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type isCompare_TargetUnion interface {
	isCompare_TargetUnion()
}

type Compare_Version struct {
	Version int64 `protobuf:"varint,4,opt,name=version,proto3,oneof"`
}

type Compare_CreateRevision struct {
	CreateRevision int64 `protobuf:"varint,5,opt,name=create_revision,json=createRevision,proto3,oneof"`
}

type Compare_ModRevision struct {
	ModRevision int64 `protobuf:"varint,6,opt,name=mod_revision,json=modRevision,proto3,oneof"`
}

type Compare_Value struct {
	Value []byte `protobuf:"bytes,7,opt,name=value,proto3,oneof"`
}

func (*Compare_Version) isCompare_TargetUnion() {}

func (*Compare_CreateRevision) isCompare_TargetUnion() {}

func (*Compare_ModRevision) isCompare_TargetUnion() {}

func (*Compare_Value) isCompare_TargetUnion() {}

func (m *Compare) GetTargetUnion() isCompare_TargetUnion {
	if m != nil {
		return m.TargetUnion
	}
	return nil
}

func (m *Compare) GetVersion() int64 {
	if x, ok := m.GetTargetUnion().(*Compare_Version); ok {
		return x.Version
	}
	return 0
}

func (m *Compare) GetCreateRevision() int64 {
	if x, ok := m.GetTargetUnion().(*Compare_CreateRevision); ok {
		return x.CreateRevision
	}
	return 0
}

func (m *Compare) GetModRevision() int64 {
	if x, ok := m.GetTargetUnion().(*Compare_ModRevision); ok {
		return x.ModRevision
	}
	return 0
}

func (m *Compare) GetValue() []byte {
	if x, ok := m.GetTargetUnion().(*Compare_Value); ok {
		return x.Value
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Compare) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Compare_Version)(nil),
		(*Compare_CreateRevision)(nil),
		(*Compare_ModRevision)(nil),
		(*Compare_Value)(nil),
	}
}

// From google paxosdb paper:
// Our implementation hinges around a powerful primitive which we call MultiOp. All other database
// operations except for iteration are implemented as a single call to MultiOp. A MultiOp is applied atomically
// and consists of three components:
// 1. A list of tests called guard. Each test in guard checks a single entry in the database. It may check
// for the absence or presence of a value, or compare with a given value. Two different tests in the guard
// may apply to the same or different entries in the database. All tests in the guard are applied and
// MultiOp returns the results. If all tests are true, MultiOp executes t op (see item 2 below), otherwise
// it executes f op (see item 3 below).
// 2. A list of database operations called t op. Each operation in the list is either an insert, delete, or
// lookup operation, and applies to a single database entry. Two different operations in the list may apply
// to the same or different entries in the database. These operations are executed
// if guard evaluates to
// true.
// 3. A list of database operations called f op. Like t op, but executed if guard evaluates to false.
type TxnRequest struct {
	// compare is a list of predicates representing a conjunction of terms.
	// If the comparisons succeed, then the success requests will be processed in order,
	// and the response will contain their respective responses in order.
	// If the comparisons fail, then the failure requests will be processed in order,
	// and the response will contain their respective responses in order.
	Compare []*Compare `protobuf:"bytes,1,rep,name=compare,proto3" json:"compare,omitempty"`
	// success is a list of requests which will be applied when compare evaluates to true.
	Success []*RequestOp `protobuf:"bytes,2,rep,name=success,proto3" json:"success,omitempty"`
	// failure is a list of requests which will be applied when compare evaluates to false.
	Failure []*RequestOp `protobuf:"bytes,3,rep,name=failure,proto3" json:"failure,omitempty"`
	// header
	Header               *RoutingHeader `protobuf:"bytes,99,opt,name=header,proto3" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TxnRequest) Reset()         { *m = TxnRequest{} }
func (m *TxnRequest) String() string { return proto.CompactTextString(m) }
func (*TxnRequest) ProtoMessage()    {}
func (*TxnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{13}
}

func (m *TxnRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxnRequest.Unmarshal(m, b)
}
func (m *TxnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxnRequest.Marshal(b, m, deterministic)
}
func (m *TxnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxnRequest.Merge(m, src)
}
func (m *TxnRequest) XXX_Size() int {
	return xxx_messageInfo_TxnRequest.Size(m)
}
func (m *TxnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TxnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TxnRequest proto.InternalMessageInfo

func (m *TxnRequest) GetCompare() []*Compare {
	if m != nil {
		return m.Compare
	}
	return nil
}

func (m *TxnRequest) GetSuccess() []*RequestOp {
	if m != nil {
		return m.Success
	}
	return nil
}

func (m *TxnRequest) GetFailure() []*RequestOp {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (m *TxnRequest) GetHeader() *RoutingHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type TxnResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// succeeded is set to true if the compare evaluated to true or false otherwise.
	Succeeded bool `protobuf:"varint,2,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	// responses is a list of responses corresponding to the results from applying
	// success if succeeded is true or failure if succeeded is false.
	Responses            []*ResponseOp `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TxnResponse) Reset()         { *m = TxnResponse{} }
func (m *TxnResponse) String() string { return proto.CompactTextString(m) }
func (*TxnResponse) ProtoMessage()    {}
func (*TxnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a266afc1ae7b829d, []int{14}
}

func (m *TxnResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxnResponse.Unmarshal(m, b)
}
func (m *TxnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxnResponse.Marshal(b, m, deterministic)
}
func (m *TxnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxnResponse.Merge(m, src)
}
func (m *TxnResponse) XXX_Size() int {
	return xxx_messageInfo_TxnResponse.Size(m)
}
func (m *TxnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TxnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TxnResponse proto.InternalMessageInfo

func (m *TxnResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TxnResponse) GetSucceeded() bool {
	if m != nil {
		return m.Succeeded
	}
	return false
}

func (m *TxnResponse) GetResponses() []*ResponseOp {
	if m != nil {
		return m.Responses
	}
	return nil
}

func init() {
	proto.RegisterEnum("bookkeeper.proto.kv.rpc.RangeRequest_SortOrder", RangeRequest_SortOrder_name, RangeRequest_SortOrder_value)
	proto.RegisterEnum("bookkeeper.proto.kv.rpc.RangeRequest_SortTarget", RangeRequest_SortTarget_name, RangeRequest_SortTarget_value)
	proto.RegisterEnum("bookkeeper.proto.kv.rpc.Compare_CompareResult", Compare_CompareResult_name, Compare_CompareResult_value)
	proto.RegisterEnum("bookkeeper.proto.kv.rpc.Compare_CompareTarget", Compare_CompareTarget_name, Compare_CompareTarget_value)
	proto.RegisterType((*RoutingHeader)(nil), "bookkeeper.proto.kv.rpc.RoutingHeader")
	proto.RegisterType((*ResponseHeader)(nil), "bookkeeper.proto.kv.rpc.ResponseHeader")
	proto.RegisterType((*RangeRequest)(nil), "bookkeeper.proto.kv.rpc.RangeRequest")
	proto.RegisterType((*RangeResponse)(nil), "bookkeeper.proto.kv.rpc.RangeResponse")
	proto.RegisterType((*PutRequest)(nil), "bookkeeper.proto.kv.rpc.PutRequest")
	proto.RegisterType((*PutResponse)(nil), "bookkeeper.proto.kv.rpc.PutResponse")
	proto.RegisterType((*IncrementRequest)(nil), "bookkeeper.proto.kv.rpc.IncrementRequest")
	proto.RegisterType((*IncrementResponse)(nil), "bookkeeper.proto.kv.rpc.IncrementResponse")
	proto.RegisterType((*DeleteRangeRequest)(nil), "bookkeeper.proto.kv.rpc.DeleteRangeRequest")
	proto.RegisterType((*DeleteRangeResponse)(nil), "bookkeeper.proto.kv.rpc.DeleteRangeResponse")
	proto.RegisterType((*RequestOp)(nil), "bookkeeper.proto.kv.rpc.RequestOp")
	proto.RegisterType((*ResponseOp)(nil), "bookkeeper.proto.kv.rpc.ResponseOp")
	proto.RegisterType((*Compare)(nil), "bookkeeper.proto.kv.rpc.Compare")
	proto.RegisterType((*TxnRequest)(nil), "bookkeeper.proto.kv.rpc.TxnRequest")
	proto.RegisterType((*TxnResponse)(nil), "bookkeeper.proto.kv.rpc.TxnResponse")
}

func init() { proto.RegisterFile("kv_rpc.proto", fileDescriptor_a266afc1ae7b829d) }

var fileDescriptor_a266afc1ae7b829d = []byte{
	// 1431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x5b, 0x6f, 0x1b, 0xd5,
	0x13, 0xf7, 0x7a, 0xe3, 0xdb, 0x78, 0xed, 0xba, 0x27, 0xfd, 0xb7, 0xfe, 0x1b, 0x2a, 0xa5, 0xdb,
	0x52, 0x12, 0xa0, 0x36, 0x0a, 0x12, 0xaa, 0x50, 0xb9, 0xe4, 0x62, 0x48, 0x94, 0x34, 0x6e, 0x8f,
	0xdd, 0x08, 0x10, 0xd2, 0x6a, 0xb3, 0x7b, 0xea, 0xac, 0xec, 0xbd, 0x70, 0x76, 0xd7, 0x38, 0x3c,
	0x23, 0xde, 0x78, 0xe3, 0x01, 0x24, 0x3e, 0x01, 0x3c, 0xf0, 0x11, 0xf8, 0x1e, 0x48, 0x7c, 0x17,
	0x74, 0x2e, 0x6b, 0xef, 0xb6, 0x75, 0xe2, 0x92, 0x3c, 0xc5, 0x33, 0x67, 0xe6, 0xb7, 0x33, 0xbf,
	0x33, 0x33, 0x67, 0x02, 0xda, 0x68, 0x62, 0xd0, 0xc0, 0x6a, 0x07, 0xd4, 0x8f, 0x7c, 0x74, 0xeb,
	0xc4, 0xf7, 0x47, 0x23, 0x42, 0x02, 0x42, 0x85, 0xa6, 0x3d, 0x9a, 0xb4, 0x69, 0x60, 0xb5, 0xca,
	0xa3, 0x89, 0x50, 0xb4, 0x6a, 0x61, 0xe4, 0x53, 0x73, 0x48, 0x84, 0xa8, 0x7f, 0x03, 0x35, 0xec,
	0xc7, 0x91, 0xe3, 0x0d, 0xf7, 0x88, 0x69, 0x13, 0x8a, 0xde, 0x80, 0x4a, 0x18, 0x51, 0x62, 0xba,
	0x86, 0x63, 0x37, 0x95, 0x35, 0x65, 0x5d, 0xc5, 0x65, 0xa1, 0xd8, 0xb7, 0xd1, 0xff, 0xa1, 0x4c,
	0x4d, 0x6f, 0x48, 0xd8, 0x59, 0x9e, 0x9f, 0x95, 0xb8, 0xbc, 0x6f, 0xa3, 0x55, 0x28, 0x50, 0x63,
	0x44, 0xce, 0x9a, 0xea, 0x9a, 0xb2, 0xae, 0xe1, 0x15, 0x7a, 0x40, 0xce, 0xf4, 0x5f, 0x15, 0xa8,
	0x63, 0x12, 0x06, 0xbe, 0x17, 0x12, 0x89, 0xff, 0x10, 0x56, 0x2c, 0xdf, 0x26, 0x1c, 0xba, 0xbe,
	0x79, 0xaf, 0xfd, 0x52, 0xc4, 0x49, 0x7c, 0xfd, 0xc8, 0x8c, 0xe2, 0x70, 0xc7, 0xb7, 0x09, 0xe6,
	0x1e, 0xe8, 0x31, 0xd4, 0xa9, 0x08, 0xd5, 0x38, 0xe5, 0x58, 0x4d, 0x6b, 0x4d, 0x59, 0xaf, 0x6e,
	0xde, 0x6f, 0x2f, 0xc8, 0xba, 0x9d, 0xc9, 0x0c, 0xd7, 0x68, 0x5a, 0xd4, 0xff, 0x2e, 0x80, 0x86,
	0x59, 0xf0, 0x98, 0x7c, 0x1b, 0x93, 0x30, 0x42, 0x0d, 0x50, 0x59, 0xfc, 0x0a, 0x8f, 0x9f, 0xfd,
	0x64, 0x5c, 0x88, 0x74, 0x89, 0x27, 0xf2, 0xd5, 0xb0, 0xc8, 0xbf, 0xeb, 0xd9, 0xe8, 0x06, 0x14,
	0xc6, 0x8e, 0xeb, 0x44, 0x3c, 0x61, 0x15, 0x0b, 0x01, 0xb5, 0xa0, 0x4c, 0xc9, 0xc4, 0x09, 0x1d,
	0xdf, 0x6b, 0xae, 0x08, 0xf6, 0x12, 0x19, 0x1d, 0x01, 0x84, 0x3e, 0x8d, 0x0c, 0x9f, 0xb2, 0xe0,
	0x0b, 0x9c, 0x80, 0xce, 0xe2, 0xe0, 0x53, 0xb1, 0xb5, 0xfb, 0x3e, 0x8d, 0x7a, 0xcc, 0x0d, 0x57,
	0xc2, 0xe4, 0x27, 0x7a, 0x0a, 0x55, 0x8e, 0x17, 0x99, 0x74, 0x48, 0xa2, 0x66, 0x91, 0x03, 0xbe,
	0xbf, 0x3c, 0xe0, 0x80, 0xfb, 0x61, 0x1e, 0x94, 0xf8, 0x8d, 0x74, 0xd0, 0x42, 0x42, 0x1d, 0x73,
	0xec, 0x7c, 0x6f, 0x9e, 0x8c, 0x49, 0xb3, 0xb4, 0xa6, 0xac, 0x97, 0x71, 0x46, 0xc7, 0x58, 0x19,
	0x91, 0xb3, 0xd0, 0xf0, 0xbd, 0xf1, 0x59, 0xb3, 0xcc, 0x0d, 0xca, 0x4c, 0xd1, 0xf3, 0xc6, 0x67,
	0xe8, 0x36, 0x80, 0xe5, 0xc7, 0x5e, 0x24, 0x4e, 0x2b, 0xfc, 0xb4, 0xc2, 0x35, 0xfc, 0x78, 0x1d,
	0x1a, 0xae, 0xe3, 0x19, 0xae, 0x6f, 0x1b, 0x33, 0x9a, 0x80, 0xd3, 0x54, 0x77, 0x1d, 0xef, 0xb1,
	0x6f, 0xe3, 0x84, 0x2c, 0x66, 0x69, 0x4e, 0xb3, 0x96, 0x55, 0x69, 0x69, 0x4e, 0xd3, 0x96, 0x6d,
	0x58, 0x65, 0x98, 0x16, 0x25, 0x66, 0x44, 0xe6, 0xc6, 0x1a, 0x37, 0xbe, 0xee, 0x3a, 0xde, 0x0e,
	0x3f, 0xc9, 0xd8, 0x9b, 0xd3, 0x97, 0xec, 0x6b, 0xd2, 0xde, 0x9c, 0xbe, 0x60, 0xff, 0x09, 0x14,
	0xff, 0x53, 0xbd, 0x49, 0x2f, 0xbd, 0x0d, 0x95, 0xd9, 0xf5, 0xa1, 0x32, 0xac, 0x1c, 0xf5, 0x8e,
	0xba, 0x8d, 0x1c, 0x02, 0x28, 0x6e, 0xf5, 0x77, 0xba, 0x47, 0xbb, 0x0d, 0x05, 0x55, 0xa1, 0xb4,
	0xdb, 0x15, 0x42, 0x5e, 0xdf, 0x06, 0x98, 0xdf, 0x0e, 0x2a, 0x81, 0x7a, 0xd0, 0xfd, 0xaa, 0x91,
	0x63, 0x36, 0xc7, 0x5d, 0xdc, 0xdf, 0xef, 0x1d, 0x35, 0x14, 0xe6, 0xbc, 0x83, 0xbb, 0x5b, 0x83,
	0x6e, 0x23, 0xcf, 0x2c, 0x1e, 0xf7, 0x76, 0x1b, 0x2a, 0xaa, 0x40, 0xe1, 0x78, 0xeb, 0xf0, 0x59,
	0xb7, 0xb1, 0xa2, 0xff, 0xa1, 0x40, 0x4d, 0xde, 0xb7, 0xe8, 0x3e, 0xf4, 0xe9, 0x2c, 0x0b, 0x85,
	0x67, 0xf1, 0xf6, 0xe2, 0x2c, 0x32, 0x0d, 0x9b, 0xa4, 0x81, 0x3a, 0xa0, 0x8e, 0x26, 0x61, 0x33,
	0xbf, 0xa6, 0xae, 0x57, 0x37, 0x6f, 0xbf, 0xd2, 0xfb, 0x80, 0x9c, 0x1d, 0x9b, 0xe3, 0x98, 0x60,
	0x66, 0x89, 0x10, 0xac, 0xb8, 0x3e, 0x25, 0xbc, 0x3f, 0xca, 0x98, 0xff, 0x66, 0x4d, 0xc3, 0x8b,
	0x41, 0xf6, 0x86, 0x10, 0xf4, 0x9f, 0xf3, 0x00, 0x4f, 0xe2, 0x68, 0x71, 0x23, 0xde, 0x80, 0xc2,
	0x84, 0x01, 0xcb, 0x26, 0x14, 0x02, 0xef, 0x40, 0x62, 0x86, 0x64, 0xd6, 0x81, 0x4c, 0x40, 0xb7,
	0xa0, 0x14, 0x50, 0x32, 0x31, 0x46, 0x13, 0xfe, 0x91, 0x32, 0x2e, 0x32, 0xf1, 0x60, 0x82, 0xee,
	0x80, 0xe6, 0x0c, 0x3d, 0x9f, 0x12, 0x43, 0x60, 0x15, 0xf8, 0x69, 0x55, 0xe8, 0x78, 0xdc, 0x29,
	0x13, 0x01, 0x5c, 0x4c, 0x9b, 0x1c, 0x72, 0xf8, 0x4b, 0x56, 0x03, 0xda, 0x80, 0x06, 0x99, 0x06,
	0xc4, 0x8a, 0x88, 0x6d, 0x4c, 0x08, 0xe5, 0xa5, 0x67, 0xf3, 0xf8, 0xaf, 0x25, 0xfa, 0x63, 0xa1,
	0xd6, 0x7f, 0x54, 0xa0, 0xca, 0x69, 0xb9, 0xaa, 0x2b, 0xfc, 0x70, 0x4e, 0x4d, 0x9e, 0x23, 0x5c,
	0x70, 0x8d, 0x92, 0x39, 0x36, 0xc6, 0x1b, 0xfb, 0x9e, 0x45, 0x89, 0x4b, 0xbc, 0x73, 0x6e, 0xe9,
	0x26, 0x14, 0x4d, 0x97, 0xdf, 0xae, 0x78, 0x1b, 0xa4, 0xc4, 0x06, 0xc6, 0x90, 0x44, 0x46, 0xe4,
	0x47, 0xe6, 0x58, 0x56, 0x43, 0x79, 0x48, 0xa2, 0x01, 0x93, 0x2f, 0xdd, 0x5d, 0xdf, 0xc1, 0xf5,
	0x54, 0x68, 0x57, 0xc5, 0xd4, 0x1d, 0xd0, 0x78, 0xb8, 0x46, 0x26, 0xa1, 0x2a, 0xd7, 0x6d, 0x71,
	0x95, 0xfe, 0x9b, 0x02, 0x68, 0x97, 0x8c, 0x49, 0x44, 0x2e, 0xf3, 0x8a, 0xa4, 0xaa, 0x55, 0xcd,
	0x54, 0xeb, 0x65, 0x79, 0xf9, 0x5d, 0x81, 0xd5, 0x4c, 0x78, 0x57, 0x45, 0x4d, 0x13, 0x4a, 0x36,
	0xc7, 0x9d, 0xad, 0x00, 0x52, 0x44, 0x0f, 0xa1, 0x2c, 0x73, 0x09, 0x9b, 0xea, 0x32, 0x63, 0xa2,
	0x24, 0x72, 0x0d, 0xf5, 0x9f, 0xf2, 0x50, 0x91, 0x04, 0xf6, 0x02, 0x74, 0x08, 0x35, 0x2a, 0x04,
	0x83, 0xf3, 0x24, 0x23, 0x7d, 0x6b, 0xa9, 0x97, 0x6d, 0x2f, 0x87, 0x35, 0xe9, 0xcd, 0xd5, 0xe8,
	0x73, 0xa8, 0x26, 0x68, 0x41, 0x1c, 0xc9, 0xc2, 0xbf, 0xbb, 0x10, 0x6b, 0x3e, 0x87, 0xf6, 0x72,
	0x18, 0xa4, 0xe7, 0x93, 0x38, 0x42, 0x06, 0xdc, 0x48, 0x70, 0x44, 0xc2, 0x32, 0x38, 0x95, 0x03,
	0xbe, 0xbb, 0x10, 0xf0, 0xe5, 0x1a, 0xd9, 0xcb, 0x61, 0x24, 0xa1, 0x52, 0x87, 0xdb, 0x15, 0x28,
	0x49, 0xad, 0xfe, 0x4b, 0x1e, 0x20, 0xa1, 0xbf, 0x17, 0xa0, 0x1e, 0xd4, 0xa9, 0x94, 0x32, 0x8c,
	0xdc, 0xbf, 0x88, 0x11, 0x79, 0x81, 0x39, 0x5c, 0x4b, 0xfc, 0x05, 0x27, 0xfb, 0xa0, 0xcd, 0x00,
	0xe7, 0xa4, 0xdc, 0x3b, 0x9f, 0x94, 0x19, 0x58, 0x35, 0xf1, 0x65, 0xb4, 0x9c, 0xc0, 0xff, 0x66,
	0x50, 0xaf, 0xe0, 0xe5, 0xbd, 0xe5, 0x78, 0x99, 0x61, 0xaf, 0x26, 0x60, 0x69, 0x66, 0x80, 0x2d,
	0x55, 0x42, 0xad, 0xff, 0xa5, 0x42, 0x69, 0xc7, 0x77, 0x03, 0x93, 0xb2, 0xab, 0x2d, 0x52, 0x12,
	0xc6, 0xe3, 0x48, 0x6e, 0x93, 0xed, 0x85, 0x1f, 0x93, 0x1e, 0xc9, 0x5f, 0xcc, 0xbd, 0xb0, 0xf4,
	0x66, 0x38, 0x72, 0x87, 0xca, 0xbf, 0x1e, 0x8e, 0xdc, 0xa0, 0xa4, 0x77, 0xd2, 0xfb, 0xea, 0xbc,
	0xf7, 0x5b, 0x50, 0x4a, 0x86, 0x3c, 0x7f, 0xf1, 0xf6, 0x72, 0x38, 0x51, 0xa0, 0x0d, 0xb8, 0xf6,
	0xe2, 0x0e, 0x52, 0x90, 0x36, 0x75, 0x2b, 0xbb, 0x82, 0xdc, 0x05, 0x2d, 0xb3, 0x08, 0x15, 0xa5,
	0x5d, 0xd5, 0x4d, 0xed, 0x41, 0x37, 0x93, 0x47, 0x92, 0x2d, 0x6d, 0xda, 0x5e, 0x4e, 0x3e, 0x93,
	0xfa, 0x67, 0x50, 0xcb, 0xa4, 0xcd, 0xf6, 0x84, 0xee, 0xd3, 0x67, 0x5b, 0x87, 0x62, 0xa9, 0xf8,
	0x82, 0xef, 0x11, 0xb8, 0xa1, 0xb0, 0xdd, 0xe4, 0xb0, 0xdb, 0xef, 0x37, 0xf2, 0xa8, 0x06, 0x95,
	0xa3, 0xde, 0xc0, 0x10, 0x56, 0xaa, 0xfe, 0x68, 0x86, 0x20, 0x97, 0x92, 0xd4, 0x2e, 0x92, 0x4b,
	0xed, 0x22, 0x4a, 0xb2, 0x8b, 0xe4, 0xe7, 0xbb, 0x88, 0xba, 0x5d, 0x07, 0x4d, 0xf0, 0x63, 0xc4,
	0x1e, 0x7b, 0xd6, 0x7e, 0xc8, 0x03, 0x0c, 0xa6, 0x5e, 0x32, 0x30, 0x3f, 0x82, 0x92, 0x25, 0xc0,
	0x9b, 0x0a, 0x1f, 0x1a, 0x6b, 0x17, 0xb1, 0x8f, 0x13, 0x07, 0xf4, 0x08, 0x4a, 0x61, 0x6c, 0x59,
	0x24, 0x4c, 0xf6, 0x12, 0xfd, 0x9c, 0x69, 0x26, 0xc7, 0x0b, 0x4e, 0x5c, 0x98, 0xf7, 0x73, 0xd3,
	0x19, 0xc7, 0x7c, 0x47, 0x59, 0xda, 0x5b, 0xba, 0x5c, 0x7a, 0x40, 0xff, 0xa9, 0x40, 0x95, 0xd3,
	0x70, 0x55, 0x83, 0xf9, 0x4d, 0xa8, 0xf0, 0xcc, 0x88, 0x2d, 0x47, 0x73, 0x19, 0xcf, 0x15, 0x68,
	0x0b, 0x2a, 0x49, 0x0f, 0x25, 0xd3, 0xf9, 0xee, 0x85, 0x5f, 0xe8, 0x05, 0x78, 0xee, 0xb5, 0xf9,
	0x8f, 0x0a, 0xda, 0x80, 0xfd, 0x0b, 0xd0, 0x27, 0x74, 0xe2, 0x58, 0x04, 0x7d, 0x09, 0x05, 0x31,
	0x4f, 0x96, 0x1b, 0xcd, 0xad, 0x25, 0xe7, 0x95, 0x9e, 0x43, 0x18, 0x54, 0x36, 0x5c, 0x96, 0x19,
	0xd3, 0xad, 0xa5, 0xc6, 0x96, 0x9e, 0x43, 0x04, 0x8a, 0x62, 0xa8, 0xa0, 0xd7, 0x19, 0xd6, 0xad,
	0xd7, 0x9a, 0x60, 0x22, 0xf4, 0xc1, 0xd4, 0x3b, 0x27, 0xf4, 0x79, 0xed, 0x9f, 0x13, 0x7a, 0xaa,
	0x32, 0xf4, 0x1c, 0xb2, 0xa1, 0x32, 0x5b, 0x72, 0xd0, 0xc6, 0x42, 0xa7, 0x17, 0x77, 0xb4, 0xd6,
	0x3b, 0xcb, 0x98, 0x26, 0x5f, 0xd9, 0x1e, 0xc3, 0x86, 0x4f, 0x87, 0x6d, 0x33, 0x30, 0xad, 0x53,
	0x92, 0xf6, 0x14, 0xff, 0xff, 0x67, 0x00, 0x9e, 0x28, 0x5f, 0x7f, 0x3c, 0x74, 0xa2, 0xd3, 0xf8,
	0xa4, 0x6d, 0xf9, 0x6e, 0x27, 0x38, 0x25, 0xae, 0x4b, 0x68, 0x67, 0xe8, 0x3f, 0x08, 0xe2, 0x71,
	0x68, 0xd2, 0x07, 0xcf, 0x63, 0xcf, 0x8a, 0x1c, 0xdf, 0xeb, 0xcc, 0x71, 0x3a, 0x1c, 0xa0, 0x33,
	0x9a, 0x74, 0x68, 0x60, 0x9d, 0x14, 0xb9, 0xf4, 0xc1, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6c,
	0xcc, 0xa5, 0xdb, 0xc2, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TableServiceClient is the client API for TableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TableServiceClient interface {
	// Range gets the keys in the range from the key-value store.
	// NOT supported yet.
	Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*RangeResponse, error)
	// Put puts the given key into the key-value store.
	// A put request increments the revision of the key-value store
	// and generates one event in the event history.
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// DeleteRange deletes the given range from the key-value store.
	// A delete request increments the revision of the key-value store
	// and generates a delete event in the event history for every deleted key.
	Delete(ctx context.Context, in *DeleteRangeRequest, opts ...grpc.CallOption) (*DeleteRangeResponse, error)
	// Txn processes multiple requests in a single transaction.
	// A txn request increments the revision of the key-value store
	// and generates events with the same revision for every completed request.
	// It is not allowed to modify the same key several times within one txn.
	Txn(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*TxnResponse, error)
	// Increment increments the amount associated with the keys
	Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementResponse, error)
}

type tableServiceClient struct {
	cc *grpc.ClientConn
}

func NewTableServiceClient(cc *grpc.ClientConn) TableServiceClient {
	return &tableServiceClient{cc}
}

func (c *tableServiceClient) Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*RangeResponse, error) {
	out := new(RangeResponse)
	err := c.cc.Invoke(ctx, "/bookkeeper.proto.kv.rpc.TableService/Range", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/bookkeeper.proto.kv.rpc.TableService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) Delete(ctx context.Context, in *DeleteRangeRequest, opts ...grpc.CallOption) (*DeleteRangeResponse, error) {
	out := new(DeleteRangeResponse)
	err := c.cc.Invoke(ctx, "/bookkeeper.proto.kv.rpc.TableService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) Txn(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*TxnResponse, error) {
	out := new(TxnResponse)
	err := c.cc.Invoke(ctx, "/bookkeeper.proto.kv.rpc.TableService/Txn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementResponse, error) {
	out := new(IncrementResponse)
	err := c.cc.Invoke(ctx, "/bookkeeper.proto.kv.rpc.TableService/Increment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TableServiceServer is the server API for TableService service.
type TableServiceServer interface {
	// Range gets the keys in the range from the key-value store.
	// NOT supported yet.
	Range(context.Context, *RangeRequest) (*RangeResponse, error)
	// Put puts the given key into the key-value store.
	// A put request increments the revision of the key-value store
	// and generates one event in the event history.
	Put(context.Context, *PutRequest) (*PutResponse, error)
	// DeleteRange deletes the given range from the key-value store.
	// A delete request increments the revision of the key-value store
	// and generates a delete event in the event history for every deleted key.
	Delete(context.Context, *DeleteRangeRequest) (*DeleteRangeResponse, error)
	// Txn processes multiple requests in a single transaction.
	// A txn request increments the revision of the key-value store
	// and generates events with the same revision for every completed request.
	// It is not allowed to modify the same key several times within one txn.
	Txn(context.Context, *TxnRequest) (*TxnResponse, error)
	// Increment increments the amount associated with the keys
	Increment(context.Context, *IncrementRequest) (*IncrementResponse, error)
}

// UnimplementedTableServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTableServiceServer struct {
}

func (*UnimplementedTableServiceServer) Range(ctx context.Context, req *RangeRequest) (*RangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Range not implemented")
}
func (*UnimplementedTableServiceServer) Put(ctx context.Context, req *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedTableServiceServer) Delete(ctx context.Context, req *DeleteRangeRequest) (*DeleteRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedTableServiceServer) Txn(ctx context.Context, req *TxnRequest) (*TxnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Txn not implemented")
}
func (*UnimplementedTableServiceServer) Increment(ctx context.Context, req *IncrementRequest) (*IncrementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}

func RegisterTableServiceServer(s *grpc.Server, srv TableServiceServer) {
	s.RegisterService(&_TableService_serviceDesc, srv)
}

func _TableService_Range_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).Range(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookkeeper.proto.kv.rpc.TableService/Range",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).Range(ctx, req.(*RangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookkeeper.proto.kv.rpc.TableService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookkeeper.proto.kv.rpc.TableService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).Delete(ctx, req.(*DeleteRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_Txn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).Txn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookkeeper.proto.kv.rpc.TableService/Txn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).Txn(ctx, req.(*TxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookkeeper.proto.kv.rpc.TableService/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).Increment(ctx, req.(*IncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TableService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bookkeeper.proto.kv.rpc.TableService",
	HandlerType: (*TableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Range",
			Handler:    _TableService_Range_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _TableService_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TableService_Delete_Handler,
		},
		{
			MethodName: "Txn",
			Handler:    _TableService_Txn_Handler,
		},
		{
			MethodName: "Increment",
			Handler:    _TableService_Increment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kv_rpc.proto",
}
